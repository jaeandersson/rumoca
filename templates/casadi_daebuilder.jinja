{%- macro render_class_model(class) %}
class {{ class.name }}(BaseModel):
    """
    {{ class.description }}
    """

    def __init__(self):
        super().__init__('{{ class.name }}')

        # Constants
        {{ render_variables(class.c, "c") | indent(4) }}

        # Binding expressions for constants
        {{ render_bindings(class.c) | indent(4) }}

        # Parameters
        {{ render_variables(class.p, "p") | indent(4) }}

        # Binding expressions for parameters
        {{ render_bindings(class.p) | indent(4) }}

        # Discrete states
        {{ render_variables(class.z, "x") | indent(4) }}

        # Start attributes for discrete states
        {{ render_start(class.z) | indent(4) }}

        # Inputs
        {{ render_variables(class.u, "u") | indent(4) }}

        # Outputs
        {{ render_variables(class.y, "y") | indent(4) }}

        # Internal variables
        {{ render_variables(class.w, "w") | indent(4) }}

        # Continuous states
        {{ render_variables(class.x, "x") | indent(4) }}

        # Start attributes for continuous states
        {{ render_start(class.x) | indent(4) }}

        # Algorithm
        {{ render_statement_list(class.alg) | indent(4) }}

        # Ordinary differential equations
        {{ render_ode(class.ode) | indent(4) }}

{%- endmacro %}

{%- macro render_class_function(class) %}
class __{{ class.name }}(BaseModel):
    """
    {{ class.description }}
    """

    def __init__(self):
        super().__init__('{{ class.name }}')

        # Constants
        {{ render_variables(class.c, "c") | indent(4) }}

        # Binding expressions for constants
        {{ render_bindings(class.c) | indent(4) }}

        # Inputs
        {{ render_variables(class.u, "u") | indent(4) }}

        # Internal variables
        {{ render_variables(class.w, "w") | indent(4) }}

        # Outputs
        {{ render_variables(class.y, "y") | indent(4) }}

        # Algorithm
        {{ render_statement_list(class.alg) | indent(4) }}

    def __call__(self, *args):
        raise RuntimeError('Not implemented')


{{ class.name }} = __{{ class .name }}()
{%- endmacro %}

{%- macro render_class(class) %}
{% if class.class_type == "Model" %}
{{ render_class_model(class) }}
{% elif class.class_type == "Function" %}
{{ render_class_function(class) }}
{% else %}
{{ panic("unhandled class type: " + class.class_type) }}
{% endif %}
{%- endmacro %}

{%- macro render_variables(var_list, ca_type) -%}
    {% for var in var_list -%}
    self.dae.add('{{ var.name }}', '{{ca_type}}'
        {%- if var.array_subscripts | length > 0 %}, dimension=[{% for sub in var.array_subscripts -%}
            {{ render_expression(expr=sub) -}}{% if not loop.last %}, {% endif %}
        {%- endfor -%}]{%- endif -%})
    {% endfor -%}
{%- endmacro -%}

{%- macro render_bindings(var_list) -%}
    {% for var in var_list -%}
    dae.assign('{{ var.name }}', {{ render_expression(expr=var.start) | indent(4) }})
    {% endfor -%}
{%- endmacro -%}

{%- macro render_start(var_list) -%}
    {% for var in var_list -%}
    dae.set_start('{{ var.name }}', {{ render_expression(expr=var.start) | indent(4) }})
    {% endfor -%}
{%- endmacro -%}

{%- macro render_ode(expr_list) -%}
    {% for expr in expr_list -%}
    self.dae.assign_der('<state_name>', {{ render_expression(expr=expr) | indent(4) }})
    {% endfor -%}
{%- endmacro -%}

{%- macro render_binary(op, expr) -%}
    {{ render_expression(expr=expr.lhs) }}{{ op }}{{ render_expression(expr=expr.rhs) -}}
{%- endmacro -%}

{%- macro render_unary(op, expr) -%}
    {{ op }}{{ render_expression(expr=expr.rhs) -}}
{%- endmacro -%}

{%- macro render_component_subscripts(comp) -%}
    [{% for sub in comp.array_subscripts -%}
        {#- handles index from 1 to 0 from Modelica to python-#}
        {{ render_expression(expr=sub) | int - 1 }}{% if not loop.last %}, {% endif %}
    {%- endfor -%}]
{%- endmacro -%}

{%- macro render_expression(expr) -%}
    {%- for key, value in expr | items -%}
        {%- if key == "UnsignedReal" -%}
            {{ value }}
        {%- elif key == "UnsignedInteger" -%}
            {{ value }}
        {%- elif key == "Ref" -%}
            self.dae['{{ value.comp.name -}}'
            {%- if value.comp.array_subscripts | length > 0 -%}
            ,{{ render_component_subscripts(comp=value.comp) }}
            {%- endif -%}]
        {%- elif key == "Add" -%}
            {{ render_binary(op=" + ", expr=value) -}}
        {%- elif key == "Sub" -%}
            {{ render_binary(op=" - ", expr=value) -}}
        {%- elif key == "Mul" -%}
            {{ render_binary(op=" * ", expr=value) -}}
        {%- elif key == "Div" -%}
            {{ render_binary(op=" / ", expr=value) -}}
        {%- elif key == "Exp" -%}
            {{- render_binary(op=" ^ ", expr=value) -}}
        {%- elif key == "Negative" -%}
            {{ render_unary(op="-", expr=value) -}}
        {%- elif key == "Parenthesis" -%}
            ( {{- render_expression(expr=value.rhs) -}} )
        {%- elif key == "Not" %}
            {{- render_unary(op="!", expr=value) -}}
        {%- elif key == "Or" -%}
            ca.logic_or(
                {{- render_expression(expr=value.lhs) -}},
                {{- render_expression(expr=value.rhs) -}})
        {%- elif key == "And" -%}
            ca.logic_and(
                {{- render_expression(expr=value.lhs) -}},
                {{- render_expression(expr=value.rhs) -}})
        {%- elif key == "Equal" -%}
                {{- render_expression(expr=value.lhs) -}} ==
                {{- render_expression(expr=value.rhs) -}}
        {%- elif key == "ArrayArguments" -%}
            ca.vertcat(
            {%- for arg in value.args %}
    {{ render_expression(expr=arg) | indent(4) }} {%- if not loop.last -%}, {% endif %}
            {%- endfor -%})
        {%- elif key == "FunctionCall" -%}
            {{ value.comp.name }}(
                {%- for arg in value.args -%}
                    {{ render_expression(expr=arg) }} {%- if not loop.last -%}, {% endif %}
                {%- endfor %})
        {%- else -%}
            {{ panic("unknown expression: " + key) }}
        {%- endif -%}
    {%- endfor -%}
{%- endmacro -%}

{%- macro render_statement_list(stmt_list) -%}
    {%- for stmt in stmt_list -%}
        {{ render_statement(stmt=stmt) }}
    {% endfor -%}
{%- endmacro -%}

{%- macro render_statement(stmt) -%}
    {%- for key, value in stmt | items -%}
        {%- if key == "Assignment" -%}
            self.dae.assign('{{ value.comp.name -}}'
            {%- if value.comp.array_subscripts | length > 0 -%}
            , {{ render_component_subscripts(comp=value.comp) }}
            {%- endif -%}
            , {{ render_expression(expr=value.rhs) }})
        {%- else -%}
            {{ panic("unknown statement: " + key) }}
        {%- endif %}
    {%- endfor -%}
{%- endmacro -%}

import casadi as ca
import numpy as np

class BaseModel:

    def __init__(self, name):
        # Underlying DaeBuilder instance
        self.dae = ca.DaeBuilder(name)

    def __repr__(self):
        return repr(self.dae)

{%- for class in classes %}
{{ render_class(class=class) }}
{%- endfor %}